# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Test Go

on:
  push:
    branches: [ "*" ]

jobs:
  Unit_Tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: docker.io/library/mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: testing
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 3306:3306
      smtp:
        image: docker.io/maildev/maildev:latest
        ports:
          - 1025:1025
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18.1

    - name: Tests
      run: go test -v -covermode=count -coverprofile=coverage.out .
      env:
        MYSQL_USER: root
        MYSQL_PASS: testing
        SMTP_PORT: 1025

    - name: Go Coverage Badge  # Pass the `coverage.out` output to this action
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: coverage.out

      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v12
        id: verify-changed-files
        with:
          files: README.md

      - name: Commit changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "chore: Updated coverage badge."

      - name: Push changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          branch: ${{ github.head_ref }}

  Code_Quality:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18.1
    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: ./...

  Build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18.1

    - name: Build
      run: go build -v -a .
      env:
        CGO_ENABLED: 0

  Docker_Package:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18.1

    - name: Build
      run: go build -v -a .
      env:
        CGO_ENABLED: 0

    - name: Build an image from Dockerfile
      run: |
        docker build -t docker.io/papeben/gatehouse:${{ github.sha }} .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/papeben/gatehouse:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
      

